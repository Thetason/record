#!/usr/bin/env node

/**
 * Google Vision API ÏÑ§Ï†ï Ïä§ÌÅ¨Î¶ΩÌä∏
 * 
 * ÏÇ¨Ïö©Î≤ï: node scripts/setup-google-vision.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function main() {
  console.log('');
  console.log('üîç Google Vision API ÏÑ§Ï†ï ÎèÑÏö∞ÎØ∏');
  console.log('='.repeat(50));
  console.log('');
  
  console.log('üìã Ï§ÄÎπÑ ÏÇ¨Ìï≠:');
  console.log('1. Google Cloud Console Í≥ÑÏ†ï');
  console.log('2. Í≤∞Ï†ú ÏàòÎã® Îì±Î°ù (Î¨¥Î£å ÌÅ¨Î†àÎîß $300 Ï†úÍ≥µ)');
  console.log('');
  
  const hasAccount = await question('Google Cloud Í≥ÑÏ†ïÏù¥ ÏûàÏúºÏã†Í∞ÄÏöî? (y/n): ');
  
  if (hasAccount.toLowerCase() !== 'y') {
    console.log('');
    console.log('üìå Google Cloud Í≥ÑÏ†ï ÏÉùÏÑ±ÌïòÍ∏∞:');
    console.log('1. https://console.cloud.google.com Ï†ëÏÜç');
    console.log('2. Google Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏');
    console.log('3. Í≤∞Ï†ú Ï†ïÎ≥¥ ÏûÖÎ†• (Î¨¥Î£å ÌÅ¨Î†àÎîß ÏÇ¨Ïö© Í∞ÄÎä•)');
    console.log('');
    console.log('Í≥ÑÏ†ïÏùÑ ÏÉùÏÑ±Ìïú ÌõÑ Îã§Ïãú Ïù¥ Ïä§ÌÅ¨Î¶ΩÌä∏Î•º Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.');
    rl.close();
    return;
  }
  
  console.log('');
  console.log('üöÄ Google Vision API ÏÑ§Ï†ï Îã®Í≥Ñ:');
  console.log('');
  
  console.log('Step 1: ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±');
  console.log('---------------------------------------');
  console.log('1. https://console.cloud.google.com Ï†ëÏÜç');
  console.log('2. ÏÉÅÎã® ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ ÌÅ¥Î¶≠');
  console.log('3. "ÏÉà ÌîÑÎ°úÏ†ùÌä∏" ÌÅ¥Î¶≠');
  console.log('4. ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Î¶Ñ: "record-ocr" ÏûÖÎ†•');
  console.log('5. "ÎßåÎì§Í∏∞" ÌÅ¥Î¶≠');
  console.log('');
  
  await question('ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÉùÏÑ±ÌïòÏÖ®ÎÇòÏöî? (EnterÎ•º ÎàÑÎ•¥Î©¥ Í≥ÑÏÜç) ');
  
  console.log('');
  console.log('Step 2: Vision API ÌôúÏÑ±Ìôî');
  console.log('---------------------------------------');
  console.log('1. ÏôºÏ™Ω Î©îÎâ¥ÏóêÏÑú "API Î∞è ÏÑúÎπÑÏä§" > "ÎùºÏù¥Î∏åÎü¨Î¶¨" ÌÅ¥Î¶≠');
  console.log('2. Í≤ÄÏÉâÏ∞ΩÏóê "Cloud Vision API" ÏûÖÎ†•');
  console.log('3. Cloud Vision API ÏÑ†ÌÉù');
  console.log('4. "ÏÇ¨Ïö©" Î≤ÑÌäº ÌÅ¥Î¶≠');
  console.log('');
  
  await question('Vision APIÎ•º ÌôúÏÑ±ÌôîÌïòÏÖ®ÎÇòÏöî? (EnterÎ•º ÎàÑÎ•¥Î©¥ Í≥ÑÏÜç) ');
  
  console.log('');
  console.log('Step 3: ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÇ§ ÏÉùÏÑ±');
  console.log('---------------------------------------');
  console.log('1. "API Î∞è ÏÑúÎπÑÏä§" > "ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥" ÌÅ¥Î¶≠');
  console.log('2. "ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ï†ïÎ≥¥ ÎßåÎì§Í∏∞" > "ÏÑúÎπÑÏä§ Í≥ÑÏ†ï" ÌÅ¥Î¶≠');
  console.log('3. ÏÑúÎπÑÏä§ Í≥ÑÏ†ï Ïù¥Î¶Ñ: "record-ocr-service" ÏûÖÎ†•');
  console.log('4. "ÎßåÎì§Í∏∞" ÌÅ¥Î¶≠');
  console.log('5. Ïó≠Ìï†: "Í∏∞Î≥∏" > "ÏÜåÏú†Ïûê" ÏÑ†ÌÉù ÌõÑ "Í≥ÑÏÜç"');
  console.log('6. "ÏôÑÎ£å" ÌÅ¥Î¶≠');
  console.log('');
  
  await question('ÏÑúÎπÑÏä§ Í≥ÑÏ†ïÏùÑ ÏÉùÏÑ±ÌïòÏÖ®ÎÇòÏöî? (EnterÎ•º ÎàÑÎ•¥Î©¥ Í≥ÑÏÜç) ');
  
  console.log('');
  console.log('Step 4: JSON ÌÇ§ Îã§Ïö¥Î°úÎìú');
  console.log('---------------------------------------');
  console.log('1. ÏÉùÏÑ±Îêú ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌÅ¥Î¶≠');
  console.log('2. "ÌÇ§" ÌÉ≠ ÌÅ¥Î¶≠');
  console.log('3. "ÌÇ§ Ï∂îÍ∞Ä" > "ÏÉà ÌÇ§ ÎßåÎì§Í∏∞" ÌÅ¥Î¶≠');
  console.log('4. "JSON" ÏÑ†ÌÉù ÌõÑ "ÎßåÎì§Í∏∞"');
  console.log('5. JSON ÌååÏùºÏù¥ Îã§Ïö¥Î°úÎìúÎê©ÎãàÎã§');
  console.log('');
  
  const hasKey = await question('JSON ÌÇ§ ÌååÏùºÏùÑ Îã§Ïö¥Î°úÎìúÌïòÏÖ®ÎÇòÏöî? (y/n): ');
  
  if (hasKey.toLowerCase() !== 'y') {
    console.log('JSON ÌÇ§ ÌååÏùºÏùÑ Îã§Ïö¥Î°úÎìúÌïú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    rl.close();
    return;
  }
  
  console.log('');
  console.log('Step 5: ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï');
  console.log('---------------------------------------');
  
  const keyPath = await question('Îã§Ïö¥Î°úÎìúÌïú JSON ÌååÏùºÏùò Í≤ΩÎ°úÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî: ');
  
  if (!fs.existsSync(keyPath)) {
    console.log('‚ùå ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', keyPath);
    rl.close();
    return;
  }
  
  try {
    // JSON ÌååÏùº ÏùΩÍ∏∞
    const keyContent = fs.readFileSync(keyPath, 'utf8');
    const keyData = JSON.parse(keyContent);
    
    // Base64 Ïù∏ÏΩîÎî©
    const base64Key = Buffer.from(keyContent).toString('base64');
    
    // .env ÌååÏùº Í≤ΩÎ°ú
    const envPath = path.join(process.cwd(), '.env');
    const envExamplePath = path.join(process.cwd(), '.env.example');
    
    // .env ÌååÏùºÏù¥ ÏóÜÏúºÎ©¥ .env.example Î≥µÏÇ¨
    if (!fs.existsSync(envPath) && fs.existsSync(envExamplePath)) {
      fs.copyFileSync(envExamplePath, envPath);
      console.log('‚úÖ .env ÌååÏùºÏùÑ ÏÉùÏÑ±ÌñàÏäµÎãàÎã§.');
    }
    
    // .env ÌååÏùº ÏùΩÍ∏∞
    let envContent = fs.existsSync(envPath) ? fs.readFileSync(envPath, 'utf8') : '';
    
    // GOOGLE_VISION_API_KEY ÏóÖÎç∞Ïù¥Ìä∏
    if (envContent.includes('GOOGLE_VISION_API_KEY=')) {
      envContent = envContent.replace(
        /GOOGLE_VISION_API_KEY=.*/,
        `GOOGLE_VISION_API_KEY="${base64Key}"`
      );
    } else {
      envContent += `\n# Google Vision API (ÏûêÎèô ÏÑ§Ï†ïÎê®)\nGOOGLE_VISION_API_KEY="${base64Key}"\n`;
    }
    
    // ÌîÑÎ°úÏ†ùÌä∏ ID ÏóÖÎç∞Ïù¥Ìä∏
    if (envContent.includes('GOOGLE_CLOUD_PROJECT_ID=')) {
      envContent = envContent.replace(
        /GOOGLE_CLOUD_PROJECT_ID=.*/,
        `GOOGLE_CLOUD_PROJECT_ID="${keyData.project_id}"`
      );
    } else {
      envContent += `GOOGLE_CLOUD_PROJECT_ID="${keyData.project_id}"\n`;
    }
    
    // .env ÌååÏùº Ï†ÄÏû•
    fs.writeFileSync(envPath, envContent);
    
    // ÏõêÎ≥∏ JSON ÌååÏùºÏùÑ ÏïàÏ†ÑÌïú ÏúÑÏπòÎ°ú Ïù¥Îèô (ÏÑ†ÌÉùÏÇ¨Ìï≠)
    const safeKeyPath = path.join(process.cwd(), 'google-vision-key.json');
    fs.copyFileSync(keyPath, safeKeyPath);
    
    // .gitignore ÌôïÏù∏
    const gitignorePath = path.join(process.cwd(), '.gitignore');
    if (fs.existsSync(gitignorePath)) {
      let gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
      if (!gitignoreContent.includes('google-vision-key.json')) {
        gitignoreContent += '\n# Google Vision API Key\ngoogle-vision-key.json\n';
        fs.writeFileSync(gitignorePath, gitignoreContent);
        console.log('‚úÖ .gitignoreÏóê ÌÇ§ ÌååÏùºÏùÑ Ï∂îÍ∞ÄÌñàÏäµÎãàÎã§.');
      }
    }
    
    console.log('');
    console.log('‚úÖ Google Vision API ÏÑ§Ï†ï ÏôÑÎ£å!');
    console.log('');
    console.log('üìã ÏÑ§Ï†ï Ï†ïÎ≥¥:');
    console.log('- ÌîÑÎ°úÏ†ùÌä∏ ID:', keyData.project_id);
    console.log('- ÏÑúÎπÑÏä§ Í≥ÑÏ†ï:', keyData.client_email);
    console.log('- ÌôòÍ≤Ω Î≥ÄÏàò: .env ÌååÏùºÏóê Ï†ÄÏû•Îê®');
    console.log('');
    console.log('üéâ Ïù¥Ï†ú OCR Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§!');
    console.log('');
    
    // Vercel ÏÑ§Ï†ï ÏïàÎÇ¥
    console.log('üìå Vercel Î∞∞Ìè¨ Ïãú:');
    console.log('1. Vercel ÎåÄÏãúÎ≥¥Îìú > Settings > Environment Variables');
    console.log('2. GOOGLE_VISION_API_KEY Ï∂îÍ∞Ä (Base64 Í∞í)');
    console.log('3. GOOGLE_CLOUD_PROJECT_ID Ï∂îÍ∞Ä');
    console.log('');
    
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò Î∞úÏÉù:', error.message);
  }
  
  rl.close();
}

main().catch(console.error);